{"version":3,"sources":["icons/logo.png","components/Avatar.js","components/Button.js","components/Carousel.js","components/Input.js","components/Jumbotron.js","components/Logo.js","components/Menu.js","components/MovieCard.js","components/NavBar.js","view/Home.js","view/ListMovies.js","api/Movies.js","App.js","registerServiceWorker.js","index.js"],"names":["module","exports","Avatar","state","value","handleFileChange","event","file","target","files","type","match","readFileAsDataURL","then","originalURL","resizeImage","canvas","url","setState","imageURL","MAX_HEIGHT","Promise","resolve","image","Image","onload","context","getContext","height","width","clearRect","drawImage","toDataURL","src","reader","FileReader","result","readAsDataURL","this","document","createElement","style","position","backgroundImage","backgroundRepeat","backgroundPosition","backgroundSize","className","onChange","top","left","opacity","Component","Button","buttonStyleOptions","onButtonPressed","icon","iconStyleOptions","children","onClick","aria-hidden","paddingRight","Carousel","activeItemIndex","changeActiveItem","props","title","enablePlaceholder","numberOfPlaceholderItems","minimumPlaceholderTime","placeholderItem","background","numberOfCards","gutter","showSlither","firstAndLastGutter","freeScrolling","requestToChangeActive","activePosition","chevronWidth","rightChevron","color","leftChevron","outsideChevron","Input","query","containerWidth","containerBorderColor","inputOpacity","inputFocus","cursor","handleClickOutside","wrapperRef","contains","closeInputHandler","onCollapseInputHandler","openInputHandler","onExpandInputHandler","resetQueryHandler","onChangeHandler","onKeyPressHandler","key","onEnterPressed","addEventListener","removeEventListener","borderColor","ref","node","placeholder","onKeyPress","input","window","requestAnimationFrame","focus","visibility","length","Jumbotron","movie","favoriteList","onAddListPressed","backgroundColor","backdrop_path","overview","fontSize","release_date","split","vote_average","console","log","filter","l","id","logoUrl","require","Logo","changeMenuMarker","Link","to","alt","Menu","page","MovieCard","substring","NavBar","changeMenuMarkerHandler","onSearchMovies","Home","movieJumbotron","movies","lastestMovies","map","horrorMovies","comedyMovies","scifiMovies","animationMovies","ListMovies","api","apiKey","getByGenrer","genrer","fetch","res","json","genres","genresArray","g","name","join","data","results","search","total_results","known_for","reduce","a","b","NetflixCloneApp","fetchedMovies","isInputClosed","avatarPhoto","toggleMovieInFavoriteList","index","indexOf","slice","doSearch","Movies","Math","floor","random","Route","exact","path","render","Redirect","React","isLocalhost","Boolean","location","hostname","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","catch","error","ReactDOM","BrowserRouter","getElementById","URL","process","origin","response","status","headers","get","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"4IAAAA,EAAOC,QAAU,IAA0B,kC,yLCIrCC,E,4MACJC,MAAQ,CACNC,MAAO,I,EAOTC,iBAAmB,SAACC,GAClB,IAAMC,EAAOD,EAAME,OAAOC,MAAM,GAE5BF,GAAQA,EAAKG,KAAKC,MAAM,YAC1B,EAAKC,kBAAkBL,GAAMM,MAAK,SAAAC,GAChC,EAAKC,YAAYD,EAAa,EAAKE,OAhBxB,KAgB4CH,MAAK,SAAAI,GAC1D,EAAKC,SAAS,CAAEd,MAAOa,UAI3B,EAAKC,SAAS,CAAEd,MAAO,M,EAI3BW,YAAc,SAACI,EAAUH,EAAQI,GAAnB,OACZ,IAAIC,SAAQ,SAAAC,GACV,IAAMC,EAAQ,IAAIC,MAElBD,EAAME,OAAS,WACb,IAAMC,EAAUV,EAAOW,WAAW,MAE9BJ,EAAMK,OAASR,IACjBG,EAAMM,OAAST,EAAaG,EAAMK,OAClCL,EAAMK,OAASR,GAGjBM,EAAQI,UAAU,EAAG,EAAGd,EAAOa,MAAOb,EAAOY,QAC7CZ,EAAOa,MAAQN,EAAMM,MACrBb,EAAOY,OAASL,EAAMK,OAEtBF,EAAQK,UAAUR,EAAO,EAAG,EAAGA,EAAMM,MAAON,EAAMK,QAElDN,EAAQN,EAAOgB,UAAU,gBAG3BT,EAAMU,IAAMd,M,EAGhBP,kBAAoB,SAACL,GAAD,OAClB,IAAIc,SAAQ,SAAAC,GACV,IAAMY,EAAS,IAAIC,WAEnBD,EAAOT,OAAS,SAACnB,GACfgB,EAAQhB,EAAME,OAAO4B,SAGvBF,EAAOG,cAAc9B,O,kEAjDvB+B,KAAKtB,OAASuB,SAASC,cAAc,Y,+BAoD7B,IACApC,EAAUkC,KAAKnC,MAAfC,MAEFqC,EAAQ,CACZC,SAAU,YAUZ,OAPItC,IACFqC,EAAME,gBAAN,eAAgCvC,EAAhC,MACAqC,EAAMG,iBAAmB,YACzBH,EAAMI,mBAAqB,SAC3BJ,EAAMK,eAAiB,SAIvB,yBAAKC,UAAU,2BACb,yBAAKA,UAAU,gBAAgBN,MAAOA,GACpC,2BAAO/B,KAAK,SAASN,MAAOA,IAC5B,2BACEM,KAAK,OACLsC,SAAUV,KAAKjC,iBACfoC,MAAO,CACLC,SAAU,WACVO,IAAK,EACLC,KAAM,EACNrB,MAAO,OACPD,OAAQ,OACRuB,QAAS,W,GArFFC,aCFfC,EAAS,SAAC,GAAD,IAAG3C,EAAH,EAAGA,KAAM4C,EAAT,EAASA,mBAAoBC,EAA7B,EAA6BA,gBAAiBC,EAA9C,EAA8CA,KAAMC,EAApD,EAAoDA,iBAAkBC,EAAtE,EAAsEA,SAAtE,OACb,4BACEX,UAAS,UAAKrC,GAAc,UAAnB,mBAAuC4C,GAChDK,QAAS,kBAAMJ,MAEdC,GACC,uBAAGT,UAAS,gBAAWS,EAAX,YAAmBC,GAAoBG,cAAY,OAAOnB,MAAO,CAAEoB,aAAcH,EAAW,MAAQ,QAEjHA,I,iBCPCI,E,4MACJ3D,MAAQ,CACN4D,gBAAiB,G,EAGnBC,iBAAmB,SAACD,GAAD,OAAqB,EAAK7C,SAAS,CAAE6C,qB,uDAE9C,IAAD,EACqBzB,KAAK2B,MAAzBC,EADD,EACCA,MAAOR,EADR,EACQA,SAEf,OACE,yBAAKX,UAAU,sBACb,yBAAKA,UAAU,kBACZmB,GAEH,yBAAKnB,UAAU,oBACb,kBAAC,IAAD,CAEEoB,mBAAiB,EACjBC,yBAA0B,EAC1BC,uBAAwB,IACxBC,gBAAiB,yBAAK7B,MAAO,CAAEb,OAAQ,IAAK2C,WAAY,aAGxDC,cAAe,EACfC,OAAQ,GACRC,aAAa,EACbC,oBAAoB,EACpBC,eAAe,EAGfC,sBAAuBvC,KAAK0B,iBAC5BD,gBAAiBzB,KAAKnC,MAAM4D,gBAC5Be,eAAgB,SAEhBC,aAAc,GACdC,aAAc,uBAAGjC,UAAU,0BAA0Ba,cAAY,OAAOnB,MAAO,CAAEwC,MAAO,UACxFC,YAAa,uBAAGnC,UAAU,yBAAyBa,cAAY,OAAOnB,MAAO,CAAEwC,MAAO,UACtFE,gBAAgB,GAEfzB,S,GAxCUN,aCDjBgC,E,4MACJjF,MAAQ,CACNkF,MAAO,GACPC,eAAgB,MAChBC,qBAAsB,cACtBC,aAAc,EACdC,YAAY,EACZC,OAAQ,W,EAWVC,mBAAqB,SAAArF,GACf,EAAKsF,aAAe,EAAKA,WAAWC,SAASvF,EAAME,UACrD,EAAKsF,oBACL,EAAK7B,MAAM8B,2B,EAIfC,iBAAmB,WACjB,EAAK9E,SAAS,CACZoE,eAAgB,MAChBC,qBAAsB,OACtBE,YAAY,EACZD,aAAc,EACdE,OAAQ,YAGV,EAAKzB,MAAMgC,wB,EAGbH,kBAAoB,kBAAM,EAAK5E,SAAS,CACtCoE,eAAgB,MAChBC,qBAAsB,cACtBE,YAAY,EACZD,aAAc,EACdE,OAAQ,a,EAGVQ,kBAAoB,kBAAM,EAAKhF,SAAS,CAAEmE,MAAO,M,EAEjDc,gBAAkB,SAAA7F,GAAK,OAAI,EAAKY,SAAS,CAAEmE,MAAO/E,EAAME,OAAOJ,S,EAE/DgG,kBAAoB,SAAA9F,GACA,UAAdA,EAAM+F,KAAmB,EAAKlG,MAAMkF,OACtC,EAAKpB,MAAMqC,eAAe,EAAKnG,MAAMkF,Q,kEAxCvC9C,SAASgE,iBAAiB,YAAajE,KAAKqD,sB,6CAI5CpD,SAASiE,oBAAoB,YAAalE,KAAKqD,sB,+BAwCvC,IAAD,OACP,OACE,yBAAK5C,UAAU,sBACb,yBACEA,UAAU,yBACVN,MAAO,CACLZ,MAAOS,KAAKnC,MAAMmF,eAClBmB,YAAanE,KAAKnC,MAAMoF,sBAE1BmB,IAAK,SAAAC,GAAI,OAAI,EAAKf,WAAae,IAE/B,yBAAK5D,UAAU,gBACb,uBACEA,UAAU,eACVa,cAAY,OACZD,QAASrB,KAAK0D,iBACdvD,MAAO,CAAEiD,OAAQpD,KAAKnC,MAAMuF,UAE9B,2BACEhF,KAAK,OACLkG,YAAatE,KAAK2B,MAAM2C,YACxBxG,MAAOkC,KAAKnC,MAAMkF,MAClBwB,WAAYvE,KAAK8D,kBACjBpD,SAAUV,KAAK6D,gBACf1D,MAAO,CAAEU,QAASb,KAAKnC,MAAMqF,cAC7BkB,IAAK,SAAAI,GAAK,OAAIA,GAASC,OAAOC,uBAAsB,kBAAMF,EAAMG,cAElE,yBAAKlE,UAAU,4BACb,uBACEA,UAAU,cACVa,cAAY,OACZD,QAASrB,KAAK4D,kBACdzD,MAAO,CACLyE,WAAY5E,KAAKnC,MAAMkF,MAAM8B,QAAU7E,KAAKnC,MAAMqF,aAAe,UAAY,SAC7EE,OAAQ,qB,GAzFNtC,aCIdgE,EAAY,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,aAAcC,EAAxB,EAAwBA,iBAAxB,OAChB,yBACExE,UAAU,sBACVN,MAAO,CACL+E,gBAAiB,UACjB7E,gBAAgB,OAAD,OARJ,+BAQI,OAPR,YAOQ,OAA2B0E,EAAMI,cAAjC,OAEjB,yBAAK1E,UAAU,4BACb,yBAAKA,UAAU,kBACb,0BAAMA,UAAU,mBAAmBsE,EAAMnD,OACzC,0BAAMnB,UAAU,yBAAyBsE,EAAMK,SAAWL,EAAMK,SAAW,oDAC3E,yBAAK3E,UAAU,sBACb,yBAAKA,UAAU,iBAAiBN,MAAO,CAAEkF,SAAU,SAAWN,EAAMO,aAAeP,EAAMO,aAAaC,MAAM,KAAK,GAAK,MACtH,yBAAK9E,UAAU,oBAAoBsE,EAAMS,eAE3C,yBAAK/E,UAAU,qBACb,kBAAC,EAAD,CAAQrC,KAAK,OAAO8C,KAAK,OAAOD,gBAAiB,kBAAMwE,QAAQC,IAAI,eAAnE,YAGA,kBAAC,EAAD,CACExE,KAAM8D,EAAaW,QAAO,SAAAC,GAAC,OAAIA,EAAEC,KAAOd,EAAMc,MAAIhB,OAAS,QAAU,OACrE5D,gBAAiB,kBAAMgE,EAAiBF,KAF1C,oB,QCtBJe,EAAUC,EAAQ,IAElBC,EAAO,SAAC,GAAD,IAAGC,EAAH,EAAGA,iBAAH,OACX,yBAAKxF,UAAU,yBACb,kBAACyF,EAAA,EAAD,CAAMC,GAAG,IAAI9E,QAAS,kBAAM4E,EAAiB,eAC3C,yBAAKxF,UAAU,cAAcd,IAAKmG,EAASM,IAAI,mBCL/CC,EAAO,SAAC,GAAD,IAAGJ,EAAH,EAAGA,iBAAkBK,EAArB,EAAqBA,KAArB,OACX,yBAAK7F,UAAU,gCACb,kBAACyF,EAAA,EAAD,CAAMC,GAAG,IAAI9E,QAAS,kBAAM4E,EAAiB,eAC3C,0BACExF,UAAU,qBACVN,MAAO,CAAEgE,YAAsB,cAATmC,EAAoB,UAAY,OAFxD,cAOF,kBAACJ,EAAA,EAAD,CAAMC,GAAG,aAAa9E,QAAS,kBAAM4E,EAAiB,WACpD,0BACExF,UAAU,qBACVN,MAAO,CAAEgE,YAAsB,UAATmC,EAAmB,UAAY,OAFvD,kBCPAC,EAAY,SAAC,GAAD,IAAGxB,EAAH,EAAGA,MAAOC,EAAV,EAAUA,aAAcC,EAAxB,EAAwBA,iBAAxB,OAChB,yBACExE,UAAU,aACVN,MAAO,CACL+E,gBAAiB,UACjB7E,gBAAgB,OAAD,OATJ,+BASI,OARR,QAQQ,OAA2B0E,EAAMI,cAAjC,OAGjB,yBAAK1E,UAAU,wBACb,yBAAKA,UAAU,mBACb,yBAAKA,UAAU,oBAAoBsE,EAAMnD,OACzC,yBAAKnB,UAAU,mBACb,yBAAKA,UAAU,mBAAmBsE,EAAMO,aAAeP,EAAMO,aAAaC,MAAM,KAAK,GAAK,MAC1F,yBAAK9E,UAAU,qBAAqBsE,EAAMS,eAE5C,yBAAK/E,UAAU,0BAA0BsE,EAAMK,SAAWL,EAAMK,SAASoB,UAAU,EAjBnE,KAiByF,MAAQ,qDAEnH,yBAAK/F,UAAU,+BACb,kBAAC,EAAD,CACEO,mBAAmB,eACnBG,iBAAiB,QACjBD,KAAM8D,EAAaW,QAAO,SAAAC,GAAC,OAAIA,EAAEC,KAAOd,EAAMc,MAAIhB,OAAS,QAAU,OACrE5D,gBAAiB,kBAAMgE,EAAiBF,UC1B5C0B,E,4MACJ5I,MAAQ,CACNyI,KAAM,a,EAGRI,wBAA0B,SAACJ,GAAD,OAAU,EAAK1H,SAAS,CAAE0H,U,uDAE1C,IAAD,OACP,OACE,yBAAK7F,UAAU,oBACb,kBAAC,EAAD,CAAMwF,iBAAkB,SAACK,GAAD,OAAU,EAAKI,wBAAwBJ,MAC/D,kBAAC,EAAD,CACEA,KAAMtG,KAAKnC,MAAMyI,KACjBL,iBAAkB,SAACK,GAAD,OAAU,EAAKI,wBAAwBJ,MAE3D,kBAAC,EAAD,CACEhC,YAAY,qBACZN,eAAgB,SAAAjB,GAAK,OAAI,EAAKpB,MAAMgF,eAAe5D,IACnDU,uBAAwB,kBAAM,EAAK9B,MAAM8B,0BACzCE,qBAAsB,kBAAM,EAAKhC,MAAMgC,0BAEzC,kBAAC,EAAD,W,GArBa7C,aCiEN8F,EAjEF,SAAC,GAAD,IAAGC,EAAH,EAAGA,eAAgB7B,EAAnB,EAAmBA,aAAcC,EAAjC,EAAiCA,iBAAkB6B,EAAnD,EAAmDA,OAAnD,OACX,yBAAKrG,UAAU,kBACb,kBAAC,EAAD,CACEsE,MAAO8B,EACP7B,aAAcA,EACdC,iBAAkB,SAAAF,GAAK,OAAIE,EAAiBF,MAG9C,kBAAC,EAAD,CAAUnD,MAAM,eACbkF,EAAOC,cAAcC,KAAI,SAAAjC,GAAK,OAC7B,kBAAC,EAAD,CACEhB,IAAKgB,EAAMc,GACXd,MAAOA,EACPC,aAAcA,EACdC,iBAAkB,SAAAF,GAAK,OAAIE,EAAiBF,UAKlD,kBAAC,EAAD,CAAUnD,MAAM,wCACbkF,EAAOG,aAAaD,KAAI,SAAAjC,GAAK,OAC5B,kBAAC,EAAD,CACEhB,IAAKgB,EAAMc,GACXd,MAAOA,EACPC,aAAcA,EACdC,iBAAkB,SAAAF,GAAK,OAAIE,EAAiBF,UAKlD,kBAAC,EAAD,CAAUnD,MAAM,sBACbkF,EAAOI,aAAaF,KAAI,SAAAjC,GAAK,OAC5B,kBAAC,EAAD,CACEhB,IAAKgB,EAAMc,GACXd,MAAOA,EACPC,aAAcA,EACdC,iBAAkB,SAAAF,GAAK,OAAIE,EAAiBF,UAKlD,kBAAC,EAAD,CAAUnD,MAAM,qDACbkF,EAAOK,YAAYH,KAAI,SAAAjC,GAAK,OAC3B,kBAAC,EAAD,CACEhB,IAAKgB,EAAMc,GACXd,MAAOA,EACPC,aAAcA,EACdC,iBAAkB,SAAAF,GAAK,OAAIE,EAAiBF,UAKlD,kBAAC,EAAD,CAAUnD,MAAM,0CACbkF,EAAOM,gBAAgBJ,KAAI,SAAAjC,GAAK,OAC/B,kBAAC,EAAD,CACEhB,IAAKgB,EAAMc,GACXd,MAAOA,EACPC,aAAcA,EACdC,iBAAkB,SAAAF,GAAK,OAAIE,EAAiBF,YCzCvCsC,EAjBI,SAAC,GAAD,IAAGP,EAAH,EAAGA,OAAQ9B,EAAX,EAAWA,aAAcpD,EAAzB,EAAyBA,MAAOqD,EAAhC,EAAgCA,iBAAhC,OACjB,yBAAKxE,UAAU,wBACb,4BAAKmB,GACL,wBAAInB,UAAU,mBACXqG,EAAOE,KAAI,SAAAjC,GAAK,OACf,wBAAIhB,IAAKgB,EAAMc,IACb,kBAAC,EAAD,CACEd,MAAOA,EACPC,aAAcA,EACdC,iBAAkB,SAAAF,GAAK,OAAIE,EAAiBF,aCZlDuC,EAAM,+BACNC,EAAS,mCAGFC,EAAc,SAACC,GAAD,OACzBC,MAAM,GAAD,OAAIJ,EAAJ,qCAAoCC,EAApC,YAHe,mBAIjBhJ,MAAK,SAAAoJ,GAAG,OAAIA,EAAIC,UAChBrJ,MAAK,SAAAoJ,GAAG,OAAIA,EAAIE,UAChBtJ,MAAK,SAAAuJ,GAEJ,IAAIjC,EAAKiC,EAAYnC,QAAO,SAAAoC,GAAC,OAAIA,EAAEC,OAASP,KAAQT,KAAI,SAAAe,GAAC,OAAIA,EAAElC,MAAIoC,KAAK,KAExE,OAAOP,MAAM,GAAD,OAAIJ,EAAJ,mCAAkCC,EAAlC,YAVI,iBAUJ,gDAAkG1B,IAC3GtH,MAAK,SAAAoJ,GAAG,OAAIA,EAAIC,UAChBrJ,MAAK,SAAA2J,GAAI,OAAIA,EAAKC,eAadC,EAAS,SAAArF,GAAK,OACzB2E,MAAM,GAAD,OAAIJ,EAAJ,iCAAgCC,EAAhC,kBAAgDxE,EAAhD,YA1Be,mBA2BjBxE,MAAK,SAAAoJ,GAAG,OAAIA,EAAIC,UAChBrJ,MAAK,SAAA2J,GAEJ,OAAKA,EAAKG,cAiBHH,EAAKC,QAhBHT,MAAM,GAAD,OAAIJ,EAAJ,kCAAiCC,EAAjC,kBAAiDxE,EAAjD,YA/BE,mBAgCXxE,MAAK,SAAAoJ,GAAG,OAAIA,EAAIC,UAChBrJ,MAAK,SAAA2J,GACJ,OAAKA,EAAKG,cAIGH,EAAKC,QACfnB,KAAI,SAAAlH,GAAM,OAAIA,EAAOwI,aACrBC,QAAO,SAACC,EAAGC,GAAJ,4BAAcD,GAAd,YAAoBC,OALrB,UCuDNC,G,kNAlFb7K,MAAQ,CACNgJ,eAAgB,GAChBC,OAAQ,CACNI,aAAc,GACdE,gBAAiB,GACjBD,YAAa,GACbF,aAAc,GACdF,cAAe,IAEjB/B,aAAc,GACd2D,cAAe,GACfC,eAAe,EACfC,YAAa,I,EAYfC,0BAA4B,SAAA/D,GAAU,IAC5BC,EAAiB,EAAKnH,MAAtBmH,aACJ+D,EAAQ/D,EAAagC,KAAI,SAAApB,GAAC,OAAIA,EAAEC,MAAImD,QAAQjE,EAAMc,KAEvC,IAAXkD,EACF,EAAKnK,SAAS,CAAEoG,aAAa,GAAD,mBAAMA,GAAN,CAAoBD,MAEhD,EAAKnG,SAAS,CAAEoG,aAAa,GAAD,mBACvBA,EAAaiE,MAAM,EAAGF,IADC,YAEvB/D,EAAaiE,MAAMF,EAAQ,Q,EAKpCG,SAAW,SAAAnG,GACToG,EAAcpG,GAAOxE,MAAK,SAAAoJ,GAAG,OAAI,EAAK/I,SAAS,CAAE+J,cAAehB,Q,kEAxB7C,IAAD,ODFtBD,MAAM,GAAD,OAAIJ,EAAJ,kCAAiCC,EAAjC,YArBiB,mBAsBnBhJ,MAAK,SAAAoJ,GAAG,OAAIA,EAAIC,UAChBrJ,MAAK,SAAA2J,GAAI,OAAIA,EAAKC,QAAQiB,KAAKC,MAAMD,KAAKE,UAAYpB,EAAKC,QAAQtD,OAAS,QCCnDtG,MAAK,SAAAoJ,GAAG,OAAI,EAAK/I,SAAS,CAAEiI,eAAgBc,ODRtED,MAAM,GAAD,OAAIJ,EAAJ,sCAAqCC,EAArC,YAhBe,mBAiBjBhJ,MAAK,SAAAoJ,GAAG,OAAIA,EAAIC,UAChBrJ,MAAK,SAAA2J,GAAI,OAAIA,EAAKC,WCOG5J,MAAK,SAAAoJ,GAAG,OAAI,EAAK/I,SAAS,CAAEkI,OAAO,2BAAM,EAAKjJ,MAAMiJ,QAAlB,IAA0BC,cAAeY,SACjGwB,EAAmB,cAAW5K,MAAK,SAAAoJ,GAAG,OAAI,EAAK/I,SAAS,CAAEkI,OAAO,2BAAM,EAAKjJ,MAAMiJ,QAAlB,IAA0BI,aAAcS,SACxGwB,EAAmB,kBAAY5K,MAAK,SAAAoJ,GAAG,OAAI,EAAK/I,SAAS,CAAEkI,OAAO,2BAAM,EAAKjJ,MAAMiJ,QAAlB,IAA0BM,gBAAiBO,SAC5GwB,EAAmB,8BAAqB5K,MAAK,SAAAoJ,GAAG,OAAI,EAAK/I,SAAS,CAAEkI,OAAO,2BAAM,EAAKjJ,MAAMiJ,QAAlB,IAA0BK,YAAaQ,SACjHwB,EAAmB,UAAU5K,MAAK,SAAAoJ,GAAG,OAAI,EAAK/I,SAAS,CAAEkI,OAAO,2BAAM,EAAKjJ,MAAMiJ,QAAlB,IAA0BG,aAAcU,W,+BAqB/F,IAAD,OACP,OACE,yBAAKlH,UAAU,OACb,kBAAC,EAAD,CACEkG,eAAgB,SAAA5D,GAAK,OAAI,EAAKmG,SAASnG,IACvCU,uBAAwB,kBAAM,EAAK7E,SAAS,CAAEgK,eAAe,KAC7DjF,qBAAsB,kBAAM,EAAK/E,SAAS,CAAEgK,eAAe,OAE7D,kBAACW,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,OAAQ,kBAC3B,EAAK7L,MAAM+K,eAAiB,EAAK/K,MAAM8K,cAAc9D,OACpD,kBAAC8E,EAAA,EAAD,CAAUxD,GAAG,YACb,kBAAC,EAAD,CACEW,OAAQ,EAAKjJ,MAAMiJ,OACnBD,eAAgB,EAAKhJ,MAAMgJ,eAC3B7B,aAAc,EAAKnH,MAAMmH,aACzBC,iBAAkB,SAAAF,GAAK,OAAI,EAAK+D,0BAA0B/D,SAGhE,kBAACwE,EAAA,EAAD,CAAOE,KAAK,aAAaC,OAAQ,kBAC9B,EAAK7L,MAAM+K,eAAiB,EAAK/K,MAAM8K,cAAc9D,OACpD,kBAAC8E,EAAA,EAAD,CAAUxD,GAAG,YACb,kBAAC,EAAD,CACEvE,MAAM,cACNkF,OAAQ,EAAKjJ,MAAMmH,aACnBA,aAAc,EAAKnH,MAAMmH,aACzBC,iBAAkB,SAAAF,GAAK,OAAI,EAAK+D,0BAA0B/D,SAGhE,kBAACwE,EAAA,EAAD,CAAOE,KAAK,UAAUC,OAAQ,kBAC5B,kBAAC,EAAD,CACE9H,MAAM,yBACNkF,OAAQ,EAAKjJ,MAAM8K,cACnB3D,aAAc,EAAKnH,MAAMmH,aACzBC,iBAAkB,SAAAF,GAAK,OAAI,EAAK+D,0BAA0B/D,c,GA5ExC6E,IAAM9I,YCC9B+I,EAAcC,QACW,cAA7BrF,OAAOsF,SAASC,UAEe,UAA7BvF,OAAOsF,SAASC,UAEhBvF,OAAOsF,SAASC,SAAS3L,MACvB,2DAsCN,SAAS4L,EAAgBC,GACvBC,UAAUC,cACPC,SAASH,GACT3L,MAAK,SAAA+L,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACtCD,EAAiBE,cAAgB,WACA,cAA3BF,EAAiB3M,QACfsM,UAAUC,cAAcO,WAK1BlF,QAAQC,IAAI,6CAKZD,QAAQC,IAAI,4CAMrBkF,OAAM,SAAAC,GACLpF,QAAQoF,MAAM,4CAA6CA,M,MCvEjEC,IAASpB,OACP,kBAACqB,EAAA,EAAD,KAAe,kBAAC,EAAD,OACf9K,SAAS+K,eAAe,SDUX,WACb,GAA6C,kBAAmBb,UAAW,CAGzE,GADkB,IAAIc,IAAIC,GAAwBzG,OAAOsF,UAC3CoB,SAAW1G,OAAOsF,SAASoB,OAIvC,OAGF1G,OAAOR,iBAAiB,QAAQ,WAC9B,IAAMiG,EAAK,UAAMgB,GAAN,sBAEPrB,IAiDV,SAAiCK,GAE/BxC,MAAMwC,GACH3L,MAAK,SAAA6M,GAGkB,MAApBA,EAASC,SACuD,IAAhED,EAASE,QAAQC,IAAI,gBAAgBvC,QAAQ,cAG7CmB,UAAUC,cAAcoB,MAAMjN,MAAK,SAAA+L,GACjCA,EAAamB,aAAalN,MAAK,WAC7BkG,OAAOsF,SAAS2B,eAKpBzB,EAAgBC,MAGnBU,OAAM,WACLnF,QAAQC,IACN,oEArEAiG,CAAwBzB,GAIxBC,UAAUC,cAAcoB,MAAMjN,MAAK,WACjCkH,QAAQC,IACN,gHAMJuE,EAAgBC,OCnCxB0B,K","file":"static/js/main.4e62e7cb.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.42cb72f5.png\";","import React, { Component } from 'react';\n\nconst MAX_HEIGHT = 128;\n\nclass Avatar extends Component {\n  state = {\n    value: ''\n  }\n\n  componentDidMount() {\n    this.canvas = document.createElement('canvas')\n  }\n\n  handleFileChange = (event) => {\n    const file = event.target.files[0]\n\n    if (file && file.type.match(/^image\\//)) {\n      this.readFileAsDataURL(file).then(originalURL => {\n        this.resizeImage(originalURL, this.canvas, MAX_HEIGHT).then(url => {\n          this.setState({ value: url })\n        })\n      })\n    } else {\n      this.setState({ value: '' })\n    }\n  }\n\n  resizeImage = (imageURL, canvas, MAX_HEIGHT) =>\n    new Promise(resolve => {\n      const image = new Image()\n\n      image.onload = () => {\n        const context = canvas.getContext('2d')\n\n        if (image.height > MAX_HEIGHT) {\n          image.width *= MAX_HEIGHT / image.height\n          image.height = MAX_HEIGHT\n        }\n\n        context.clearRect(0, 0, canvas.width, canvas.height)\n        canvas.width = image.width\n        canvas.height = image.height\n\n        context.drawImage(image, 0, 0, image.width, image.height)\n\n        resolve(canvas.toDataURL('image/jpeg'))\n      }\n\n      image.src = imageURL\n    })\n\n  readFileAsDataURL = (file) =>\n    new Promise(resolve => {\n      const reader = new FileReader()\n\n      reader.onload = (event) => {\n        resolve(event.target.result)\n      }\n\n      reader.readAsDataURL(file)\n    })\n\n  render() {\n    const { value } = this.state\n\n    const style = {\n      position: 'relative'\n    }\n\n    if (value) {\n      style.backgroundImage = `url(\"${value}\")`\n      style.backgroundRepeat = 'no-repeat'\n      style.backgroundPosition = 'center'\n      style.backgroundSize = 'cover'\n    }\n\n    return (\n      <div className=\"navbar-avatar-container\">\n        <div className=\"navbar-avatar\" style={style}>\n          <input type=\"hidden\" value={value} />\n          <input\n            type=\"file\"\n            onChange={this.handleFileChange}\n            style={{\n              position: 'absolute',\n              top: 0,\n              left: 0,\n              width: '100%',\n              height: '100%',\n              opacity: 0\n            }}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport { Avatar };\n","import React from 'react';\n\nconst Button = ({ type, buttonStyleOptions, onButtonPressed, icon, iconStyleOptions, children }) => (\n  <button\n    className={`${type ? type : 'default'}-button ${buttonStyleOptions}`}\n    onClick={() => onButtonPressed()}\n  >\n    {icon &&\n      <i className={`fa fa-${icon} ${iconStyleOptions}`} aria-hidden=\"true\" style={{ paddingRight: children ? '3px' : null }}></i>\n    }\n    {children}\n  </button>\n);\n\nexport { Button };\n","import React, { Component } from 'react';\nimport ItemsCarousel from 'react-items-carousel';\n\nclass Carousel extends Component {\n  state = {\n    activeItemIndex: 1\n  }\n\n  changeActiveItem = (activeItemIndex) => this.setState({ activeItemIndex });\n\n  render() {\n    const { title, children } = this.props;\n\n    return (\n      <div className=\"carousel-container\">\n        <div className=\"carousel-title\">\n          {title}\n        </div>\n        <div className=\"carousel-content\">\n          <ItemsCarousel\n            // Placeholder configurations\n            enablePlaceholder\n            numberOfPlaceholderItems={5}\n            minimumPlaceholderTime={1000}\n            placeholderItem={<div style={{ height: 250, background: '#202020' }}></div>}\n\n            // Carousel configurations\n            numberOfCards={3}\n            gutter={12}\n            showSlither={true}\n            firstAndLastGutter={true}\n            freeScrolling={false}\n\n            // Active item configurations\n            requestToChangeActive={this.changeActiveItem}\n            activeItemIndex={this.state.activeItemIndex}\n            activePosition={'center'}\n\n            chevronWidth={24}\n            rightChevron={<i className=\"fa fa-angle-right fa-5x\" aria-hidden=\"true\" style={{ color: '#fff'}}></i>}\n            leftChevron={<i className=\"fa fa-angle-left fa-5x\" aria-hidden=\"true\" style={{ color: '#fff'}}></i>}\n            outsideChevron={false}\n          >\n            {children}\n          </ItemsCarousel>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport { Carousel };\n","import React, { Component } from 'react';\n\nclass Input extends Component {\n  state = {\n    query: '',\n    containerWidth: '10%',\n    containerBorderColor: 'transparent',\n    inputOpacity: 0,\n    inputFocus: false,\n    cursor: 'pointer'\n  }\n\n  componentDidMount() {\n    document.addEventListener('mousedown', this.handleClickOutside);\n  }\n\n  componentWillUnmount() {\n    document.removeEventListener('mousedown', this.handleClickOutside);\n  }\n\n  handleClickOutside = event => {\n    if (this.wrapperRef && !this.wrapperRef.contains(event.target)) {\n      this.closeInputHandler();\n      this.props.onCollapseInputHandler();\n    }\n  }\n\n  openInputHandler = () => {\n    this.setState({\n      containerWidth: '85%',\n      containerBorderColor: '#fff',\n      inputFocus: true,\n      inputOpacity: 1,\n      cursor: 'default'\n    });\n\n    this.props.onExpandInputHandler();\n  }\n\n  closeInputHandler = () => this.setState({\n    containerWidth: '10%',\n    containerBorderColor: 'transparent',\n    inputFocus: false,\n    inputOpacity: 0,\n    cursor: 'pointer'\n  });\n\n  resetQueryHandler = () => this.setState({ query: '' });\n\n  onChangeHandler = event => this.setState({ query: event.target.value });\n\n  onKeyPressHandler = event => {\n    if (event.key === 'Enter' && this.state.query) {\n      this.props.onEnterPressed(this.state.query)\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"navbar-input-space\">\n        <div\n          className=\"navbar-input-container\"\n          style={{\n            width: this.state.containerWidth,\n            borderColor: this.state.containerBorderColor\n          }}\n          ref={node => this.wrapperRef = node}\n        >\n          <div className=\"navbar-input\">\n            <i\n              className=\"fa fa-search\"\n              aria-hidden=\"true\"\n              onClick={this.openInputHandler}\n              style={{ cursor: this.state.cursor }}\n            ></i>\n            <input\n              type=\"text\"\n              placeholder={this.props.placeholder}\n              value={this.state.query}\n              onKeyPress={this.onKeyPressHandler}\n              onChange={this.onChangeHandler}\n              style={{ opacity: this.state.inputOpacity}}\n              ref={input => input && window.requestAnimationFrame(() => input.focus())}\n            />\n            <div className=\"navbar-input-reset-query\">\n              <i\n                className=\"fa fa-times\"\n                aria-hidden=\"true\"\n                onClick={this.resetQueryHandler}\n                style={{\n                  visibility: this.state.query.length && this.state.inputOpacity ? 'visible' : 'hidden',\n                  cursor: 'pointer'\n                }}\n              ></i>\n            </div>\n\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport { Input };\n","import React from 'react';\nimport { Button } from './index';\n\nconst imageUrl = 'https://image.tmdb.org/t/p/';\nconst size = 'original';\n\nconst Jumbotron = ({ movie, favoriteList, onAddListPressed }) => (\n  <div\n    className=\"jumbotron-container\"\n    style={{\n      backgroundColor: '#202020',\n      backgroundImage: `url(${imageUrl}${size}${movie.backdrop_path})`\n  }}>\n    <div className=\"jumbotron-info-container\">\n      <div className=\"jumbotron-info\">\n        <span className=\"jumbotron-title\">{movie.title}</span>\n        <span className=\"jumbotron-description\">{movie.overview ? movie.overview : 'Esse filme ainda não tem uma descrição.'}</span>\n        <div className=\"jumbotron-sub-info\">\n          <div className=\"jumbotron-year\" style={{ fontSize: '23px' }}>{movie.release_date ? movie.release_date.split('-')[0] : null}</div>\n          <div className=\"jumbotron-rating\">{movie.vote_average}</div>\n        </div>\n        <div className=\"jumbotron-buttons\">\n          <Button type=\"play\" icon=\"play\" onButtonPressed={() => console.log('Assistir!')}>\n            Assistir\n          </Button>\n          <Button\n            icon={favoriteList.filter(l => l.id === movie.id).length ? 'check' : 'plus'}\n            onButtonPressed={() => onAddListPressed(movie)}\n          >\n            Minha Lista\n          </Button>\n        </div>\n      </div>\n    </div>\n  </div>\n);\n\nexport { Jumbotron };\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nconst logoUrl = require('../icons/logo.png');\n\nconst Logo = ({ changeMenuMarker }) => (\n  <div className=\"navbar-logo-container\">\n    <Link to='/' onClick={() => changeMenuMarker('início')}>\n      <img className=\"navbar-logo\" src={logoUrl} alt='navbar-logo' />\n    </Link>\n  </div>\n);\n\nexport { Logo };\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nconst Menu = ({ changeMenuMarker, page }) => (\n  <div className=\"navbar-menu-option-container\">\n    <Link to='/' onClick={() => changeMenuMarker('início')}>\n      <span\n        className=\"navbar-menu-option\"\n        style={{ borderColor: page === 'início' ? '#B8130D' : null }}\n      >\n        Início\n      </span>\n    </Link>\n    <Link to='/favorites' onClick={() => changeMenuMarker('lista')}>\n      <span\n        className=\"navbar-menu-option\"\n        style={{ borderColor: page === 'lista' ? '#B8130D' : null }}\n      >\n        Minha Lista\n      </span>\n    </Link>\n  </div>\n);\n\nexport { Menu };\n","import React from 'react';\nimport { Button } from './index';\n\nconst imageUrl = 'https://image.tmdb.org/t/p/';\nconst size = 'w500';\nconst TRUNCATE_LENGTH = 100;\n\nconst MovieCard = ({ movie, favoriteList, onAddListPressed }) => (\n  <div\n    className=\"movie-card\"\n    style={{\n      backgroundColor: '#202020',\n      backgroundImage: `url(${imageUrl}${size}${movie.backdrop_path})`\n    }}\n  >\n    <div className=\"movie-card-container\">\n      <div className=\"movie-card-text\">\n        <div className=\"movie-card-title\">{movie.title}</div>\n        <div className=\"movie-card-info\">\n          <div className=\"movie-card-year\">{movie.release_date ? movie.release_date.split('-')[0] : null}</div>\n          <div className=\"movie-card-rating\">{movie.vote_average}</div>\n        </div>\n        <div className=\"movie-card-description\">{movie.overview ? movie.overview.substring(0, TRUNCATE_LENGTH) + '...' : 'Esse filme ainda não tem uma descrição.'}</div>\n      </div>\n      <div className=\"movie-card-button-container\">\n        <Button\n          buttonStyleOptions=\"round-button\"\n          iconStyleOptions=\"fa-fw\"\n          icon={favoriteList.filter(l => l.id === movie.id).length ? 'check' : 'plus'}\n          onButtonPressed={() => onAddListPressed(movie)}\n        />\n      </div>\n    </div>\n  </div>\n);\n\nexport { MovieCard };\n","import React, { Component } from 'react';\nimport { Logo, Menu, Input, Avatar } from './index';\n\nclass NavBar extends Component {\n  state = {\n    page: 'início'\n  }\n\n  changeMenuMarkerHandler = (page) => this.setState({ page });\n\n  render() {\n    return (\n      <div className=\"navbar-container\">\n        <Logo changeMenuMarker={(page) => this.changeMenuMarkerHandler(page)} />\n        <Menu\n          page={this.state.page}\n          changeMenuMarker={(page) => this.changeMenuMarkerHandler(page)}\n        />\n        <Input\n          placeholder=\"Filmes, pessoas...\"\n          onEnterPressed={query => this.props.onSearchMovies(query)}\n          onCollapseInputHandler={() => this.props.onCollapseInputHandler()}\n          onExpandInputHandler={() => this.props.onExpandInputHandler()}\n        />\n        <Avatar />\n      </div>\n    );\n  }\n}\n\nexport { NavBar };\n","import React from 'react';\nimport { MovieCard, Jumbotron, Carousel } from '../components';\n\nconst Home = ({ movieJumbotron, favoriteList, onAddListPressed, movies }) => (\n  <div className=\"home-container\">\n    <Jumbotron\n      movie={movieJumbotron}\n      favoriteList={favoriteList}\n      onAddListPressed={movie => onAddListPressed(movie)}\n    />\n\n    <Carousel title=\"Nos Cinemas\">\n      {movies.lastestMovies.map(movie => (\n        <MovieCard\n          key={movie.id}\n          movie={movie}\n          favoriteList={favoriteList}\n          onAddListPressed={movie => onAddListPressed(movie)}\n        />\n      ))}\n    </Carousel>\n\n    <Carousel title=\"Os melhores para te dar aquele susto\">\n      {movies.horrorMovies.map(movie => (\n        <MovieCard\n          key={movie.id}\n          movie={movie}\n          favoriteList={favoriteList}\n          onAddListPressed={movie => onAddListPressed(movie)}\n        />\n      ))}\n    </Carousel>\n\n    <Carousel title=\"Para chorar de rir\">\n      {movies.comedyMovies.map(movie => (\n        <MovieCard\n          key={movie.id}\n          movie={movie}\n          favoriteList={favoriteList}\n          onAddListPressed={movie => onAddListPressed(movie)}\n        />\n      ))}\n    </Carousel>\n\n    <Carousel title=\"Filmes que farão você viajar em outro mundo\">\n      {movies.scifiMovies.map(movie => (\n        <MovieCard\n          key={movie.id}\n          movie={movie}\n          favoriteList={favoriteList}\n          onAddListPressed={movie => onAddListPressed(movie)}\n        />\n      ))}\n    </Carousel>\n\n    <Carousel title=\"Animações para relaxar sua tarde\">\n      {movies.animationMovies.map(movie => (\n        <MovieCard\n          key={movie.id}\n          movie={movie}\n          favoriteList={favoriteList}\n          onAddListPressed={movie => onAddListPressed(movie)}\n        />\n      ))}\n    </Carousel>\n  </div>\n);\n\nexport default Home;\n","import React from 'react';\nimport { MovieCard } from '../components';\n\nconst ListMovies = ({ movies, favoriteList, title, onAddListPressed }) => (\n  <div className=\"movie-list-container\">\n    <h1>{title}</h1>\n    <ol className=\"movie-list-grid\">\n      {movies.map(movie => (\n        <li key={movie.id}>\n          <MovieCard\n            movie={movie}\n            favoriteList={favoriteList}\n            onAddListPressed={movie => onAddListPressed(movie)}\n          />\n        </li>\n      ))}\n    </ol>\n  </div>\n);\n\nexport default ListMovies;\n","const api = \"https://api.themoviedb.org/3\"\nconst apiKey = 'df1a8a2aad5fbba70d7851155c59e9f7';\nconst defaultOptions= 'language=pt-BR';\n\nexport const getByGenrer = (genrer) =>\n  fetch(`${api}/genre/movie/list?api_key=${apiKey}&${defaultOptions}`)\n    .then(res => res.json())\n    .then(res => res.genres) /* Return a list with all genres */\n    .then(genresArray => {\n      /* get the id of specific genrer */\n      let id = genresArray.filter(g => g.name === genrer).map(g => g.id).join(',');\n\n      return fetch(`${api}/discover/movie?api_key=${apiKey}&${defaultOptions}&sort_by=popularity.desc&with_genres=${id}`)\n        .then(res => res.json())\n        .then(data => data.results) /* return a list of movies based on genrer */\n    })\n\nexport const getInTheater = () =>\n  fetch(`${api}/movie/now_playing?api_key=${apiKey}&${defaultOptions}`)\n    .then(res => res.json())\n    .then(data => data.results) /* return a list of movies in theater */\n\nexport const getMostPopular = () =>\nfetch(`${api}/movie/popular?api_key=${apiKey}&${defaultOptions}`)\n  .then(res => res.json())\n  .then(data => data.results[Math.floor(Math.random() * (data.results.length - 1))])\n\nexport const search = query =>\n  fetch(`${api}/search/movie?api_key=${apiKey}&query=${query}&${defaultOptions}`)\n    .then(res => res.json())\n    .then(data => {\n      /* In cases when no movies were found. Try search for movies known for */\n      if (!data.total_results) {\n        return fetch(`${api}/search/person?api_key=${apiKey}&query=${query}&${defaultOptions}`)\n          .then(res => res.json())\n          .then(data => {\n            if (!data.total_results) {\n              return [];\n            }\n            \n            let movies = data.results\n              .map(result => result.known_for) /* get only array of known_for */\n              .reduce((a, b) => [...a, ...b]); /* reduce many arrays into only one */\n\n            return movies;\n          })\n      }\n\n      /* In cases when movie were searched for return it */\n      return data.results;\n    })\n","import React from 'react';\nimport { Route, Redirect } from 'react-router-dom';\nimport { NavBar } from './components';\nimport Home from './view/Home';\nimport ListMovies from './view/ListMovies';\nimport * as Movies from './api/Movies';\n\nimport './App.css'\n\nclass NetflixCloneApp extends React.Component {\n  state = {\n    movieJumbotron: {},\n    movies: {\n      comedyMovies: [],\n      animationMovies: [],\n      scifiMovies: [],\n      horrorMovies: [],\n      lastestMovies: []\n    },\n    favoriteList: [],\n    fetchedMovies: [],\n    isInputClosed: true,\n    avatarPhoto: ''\n  }\n\n  componentDidMount() {\n    Movies.getMostPopular().then(res => this.setState({ movieJumbotron: res }));\n    Movies.getInTheater().then(res => this.setState({ movies: { ...this.state.movies, lastestMovies: res } }));\n    Movies.getByGenrer('Comédia').then(res => this.setState({ movies: { ...this.state.movies, comedyMovies: res } }));\n    Movies.getByGenrer('Animação').then(res => this.setState({ movies: { ...this.state.movies, animationMovies: res } }));\n    Movies.getByGenrer('Ficção científica').then(res => this.setState({ movies: { ...this.state.movies, scifiMovies: res } }));\n    Movies.getByGenrer('Terror').then(res => this.setState({ movies: { ...this.state.movies, horrorMovies: res } }));\n  }\n\n  toggleMovieInFavoriteList = movie => {\n    const { favoriteList } = this.state;\n    let index = favoriteList.map(l => l.id).indexOf(movie.id);\n\n    if (index === -1) {\n      this.setState({ favoriteList: [...favoriteList, movie] });\n    } else {\n      this.setState({ favoriteList: [\n        ...favoriteList.slice(0, index),\n        ...favoriteList.slice(index + 1)\n      ]});\n    }\n  }\n\n  doSearch = query => {\n    Movies.search(query).then(res => this.setState({ fetchedMovies: res }));\n  }\n\n  render() {\n    return (\n      <div className=\"app\">\n        <NavBar\n          onSearchMovies={query => this.doSearch(query)}\n          onCollapseInputHandler={() => this.setState({ isInputClosed: true })}\n          onExpandInputHandler={() => this.setState({ isInputClosed: false })}\n        />\n        <Route exact path='/' render={() => (\n          !this.state.isInputClosed && this.state.fetchedMovies.length\n          ? <Redirect to=\"/search\" />\n          : <Home\n              movies={this.state.movies}\n              movieJumbotron={this.state.movieJumbotron}\n              favoriteList={this.state.favoriteList}\n              onAddListPressed={movie => this.toggleMovieInFavoriteList(movie)}\n            />\n        )} />\n        <Route path='/favorites' render={() => (\n          !this.state.isInputClosed && this.state.fetchedMovies.length\n          ? <Redirect to=\"/search\" />\n          : <ListMovies\n              title=\"Minha Lista\"\n              movies={this.state.favoriteList}\n              favoriteList={this.state.favoriteList}\n              onAddListPressed={movie => this.toggleMovieInFavoriteList(movie)}\n            />\n        )} />\n        <Route path='/search' render={() => (\n          <ListMovies\n            title=\"Resultados da Pesquisa\"\n            movies={this.state.fetchedMovies}\n            favoriteList={this.state.favoriteList}\n            onAddListPressed={movie => this.toggleMovieInFavoriteList(movie)}\n          />\n        )} />\n      </div>\n    )\n  }\n}\nexport default NetflixCloneApp;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nimport './index.css';\n\nReactDOM.render(\n  <BrowserRouter><App /></BrowserRouter>,\n  document.getElementById('root')\n);\n\nregisterServiceWorker();\n"],"sourceRoot":""}